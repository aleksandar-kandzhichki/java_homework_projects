package hwk_upr;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.List;

public class Launch {
	static int port = 9991;
	static String endCommunicationStr = "endConnection";
	
	public static void main() {
		Thread thread1 = new Thread () {
			  public void run () {
				try {
					launchServer();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			  }
			};
		Thread thread2 = new Thread () {
		  public void run () {
			try {
				launchClient();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		  }
		};
		thread1.start();
		thread2.start();
	}
	
	public static void launchServer() {

		try(ServerSocket serverSocket = new ServerSocket(port)) {
			while (true) {
				Socket sock = serverSocket.accept();
		      	new serverChatThread(sock).start();
		    }
        } catch (IOException e) {
            e.printStackTrace();
        }
	}
	
	public static void launchClient() {

		System.out.println("started client");

        Socket clientSocket = new Socket("localhost", port);
        DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());
        BufferedReader inFromServer = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

        boolean done = false;

        
        for(int i=0;i<10;i++) {
        	outToServer.writeBytes(Integer.toString(i+i+i) + '\n');
        }
        while(!done) {
	        row = inFromUser.readLine();
	        if(row == null || row.length() == 0) done=true;
	        else {
	        	outToServer.writeBytes(row + '\n');
	        }
        }
        
        outToServer.writeBytes(endCommunicationStr + "\n");
        inFromUser.close();
        
        String result = inFromServer.readLine();
        
        System.out.println(result);
        clientSocket.close();
	}
}
