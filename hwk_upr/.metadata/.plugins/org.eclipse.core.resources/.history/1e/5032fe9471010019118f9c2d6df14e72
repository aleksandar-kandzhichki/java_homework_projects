import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import javax.swing.text.html.HTMLDocument.Iterator;

import ca.pfv.spmf.algorithms.sequential_rules.cmrules.AlgoCMRules;
import ca.pfv.spmf.input.sequence_database_list_integers.*;


public class main {

	static int port = 9991;
	static String endCommunicationStr = "endCSV";
	static String readFilePath = "dataCsv.csv";
	
	public static void main(String[] args) {
		System.out.println("hello world");
		
		Thread thread1 = new Thread () {
			  public void run () {
				try {
					launchServer();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			  }
			};
			Thread thread2 = new Thread () {
			  public void run () {
				try {
					LaunchClient();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			  }
			};
			thread1.start();
			thread2.start();
		
	}
	
	public static void launchServer() throws IOException {
		try(ServerSocket serverSocket = new ServerSocket(9991)) {
            Socket connectionSocket = serverSocket.accept();

            //Create Input&Outputstreams for the connection
            InputStream inputToServer = connectionSocket.getInputStream();
            OutputStream outputFromServer = connectionSocket.getOutputStream();

            PrintWriter serverPrintOut = new PrintWriter(new OutputStreamWriter(outputFromServer, "UTF-8"), true);

            List<DataEntry> data = readFromClient(inputToServer);
            
            serverPrintOut.write("Received all data successfully!");
            

            MiningHelper miningHelper = new MiningHelper();
            
        } catch (IOException e) {
            e.printStackTrace();
        }
	}
	
	public static void LaunchClient() throws IOException {
		System.out.println("started client");
		String row;
		BufferedReader inFromUser = new BufferedReader(new FileReader(new File(readFilePath)));

        Socket clientSocket = new Socket("localhost", port);
        DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());
        BufferedReader inFromServer = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

        boolean done = false;

        while(!done) {
	        row = inFromUser.readLine();
	        if(row == null || row.length() == 0) done=true;
	        else {
	        	outToServer.writeBytes(row + '\n');
	        }
        }
        
        outToServer.writeBytes(endCommunicationStr + "\n");
        inFromUser.close();
        
        String result = inFromServer.readLine();
        
        System.out.println(result);
        clientSocket.close();
	}

	

	public static List<DataEntry> readFromClient(InputStream input){
        Scanner scanner = new Scanner(input, "UTF-8");
        boolean done = false;
        
        List<DataEntry> data = new ArrayList<DataEntry>();

        while(!done) {
            String row = scanner.nextLine();

            if(row.toLowerCase().trim().equals(endCommunicationStr.toLowerCase())) {
                done = true;
            }
            else {
            	try {
					data.add((new DataEntry()).fromRow(row));
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        }

        scanner.close();
        return data;
	}

}
